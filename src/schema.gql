# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface BankAccount {
  id: String!
  updatedAt: DateTime
  createdAt: DateTime
  balance: Int!
  accountNumber: String!
  bankName: String!
  typeAccount: EBankAccoutType!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Bank account type"""
enum EBankAccoutType {
  SAVINGS
  CHECKING
  UNKNOWN
}

type BankAccountObject implements Base {
  id: String!
  updatedAt: DateTime
  createdAt: DateTime
  balance: Int!
  accountNumber: String!
  bankName: String!
  typeAccount: EBankAccoutType!
}

interface Base {
  id: String!
  updatedAt: DateTime
  createdAt: DateTime
}

type CheckingAccount implements BankAccount & Base {
  id: String!
  updatedAt: DateTime
  createdAt: DateTime
  balance: Int!
  accountNumber: String!
  bankName: String!
  typeAccount: EBankAccoutType!
  transferenceCost: Int
}

type SavingsAccount implements BankAccount & Base {
  id: String!
  updatedAt: DateTime
  createdAt: DateTime
  balance: Int!
  accountNumber: String!
  bankName: String!
  typeAccount: EBankAccoutType!
  interestRate: Float!
}

type User implements Base {
  id: String!
  updatedAt: DateTime
  createdAt: DateTime
  name: String!
  email: String!
  password: String!
  isActive: Boolean!
}

type UserBankSetting implements Base {
  id: String!
  updatedAt: DateTime
  createdAt: DateTime
  user: User!
  bankSetting: BankSetting!
  bankAccount: BankAccount!
  bankAccountType: EBankAccoutType!
}

type BankSetting implements Base {
  id: String!
  updatedAt: DateTime
  createdAt: DateTime
  transferencePassword: String!
  contacts: [UserBankSetting!]!
}

type AuthResponse {
  token: String!
}

input BankAccountType {
  balance: Int!
  accountNumber: String!
  bankName: String!
  typeAccount: EBankAccoutType!
}

input UserType {
  name: String!
  email: String!
  password: String!
  isActive: Boolean!
}

input UserBankSettingType {
  user: UserType!
  bankSetting: BankSettingType!
  bankAccount: BankAccountType!
  bankAccountType: EBankAccoutType!
}

input BankSettingType {
  transferencePassword: String!
  contacts: [UserBankSettingType!]!
}

type Query {
  findOneUserById(id: String!): User!
  revalidate: AuthResponse!
  findOneUserBankSetting(id: String!): UserBankSetting!
  userBankSetting: UserBankSetting!
  findOneBankSettings(id: String!): BankSetting!
  findOneBankAccount(getBankAccountGetterInput: GetBankAccountInput!): BankAccount!
}

input GetBankAccountInput {
  id: String!
  accountType: EBankAccoutType!
}

type Mutation {
  updateUser(updateUserInput: UpdateUserInput!): User!
  login(loginInput: LoginInput!): AuthResponse!
  createUserBankSettings(createUserBankSettingDto: CreateUserBankSettingInputType!): UserBankSetting!
  updateBankSetting(updateBankSettingInput: UpdateBankSettingInput!): BankSetting!
  transferBalance(transferBalanceInput: TransferBalanceInput!): Boolean!
  transferBalanceContact(transferBalanceContactInput: TransferBalanceContactInput!): Boolean!
  depositBalance(depositBalanceInput: DepositBalanceInput!): Boolean!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
  id: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateUserBankSettingInputType {
  userInput: CreateUserInputType!
  bankSettingInput: CreateBankSettingInputType!
  createBankAccountsFactoryInput: CreateBankAccountsFactoryInputType!
}

input CreateUserInputType {
  name: String!
  email: String!
  password: String!
}

input CreateBankSettingInputType {
  transferencePassword: String!
  contact: [String!]
}

input CreateBankAccountsFactoryInputType {
  balance: Float!
  accountType: EBankAccoutType!
  bankName: String!
  interestRate: Float
  transferenceCost: Float
}

input UpdateBankSettingInput {
  transferencePassword: String
  contact: [String!]
  id: String!
}

input TransferBalanceInput {
  accountTypeTo: EBankAccoutType!
  accountNumberTo: String!
  bankNameTo: String!
  emailTo: String!
  amount: Int!
  transferencePassword: String!
}

input TransferBalanceContactInput {
  accountTypeTo: EBankAccoutType!
  accountIdTo: String!
  amount: Int!
  transferencePassword: String!
}

input DepositBalanceInput {
  accountTypeTo: EBankAccoutType!
  accountIdTo: String!
  amount: Int!
  transferencePassword: String!
}